// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package ducao_govidia_smi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// NvidiaQueryServiceClient is the client API for NvidiaQueryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NvidiaQueryServiceClient interface {
	QueryGpu(ctx context.Context, in *DataCue, opts ...grpc.CallOption) (*NvidiaQueryResponse, error)
}

type nvidiaQueryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNvidiaQueryServiceClient(cc grpc.ClientConnInterface) NvidiaQueryServiceClient {
	return &nvidiaQueryServiceClient{cc}
}

func (c *nvidiaQueryServiceClient) QueryGpu(ctx context.Context, in *DataCue, opts ...grpc.CallOption) (*NvidiaQueryResponse, error) {
	out := new(NvidiaQueryResponse)
	err := c.cc.Invoke(ctx, "/ducao.govidia_smi.NvidiaQueryService/QueryGpu", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NvidiaQueryServiceServer is the server API for NvidiaQueryService service.
// All implementations must embed UnimplementedNvidiaQueryServiceServer
// for forward compatibility
type NvidiaQueryServiceServer interface {
	QueryGpu(context.Context, *DataCue) (*NvidiaQueryResponse, error)
	mustEmbedUnimplementedNvidiaQueryServiceServer()
}

// UnimplementedNvidiaQueryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNvidiaQueryServiceServer struct {
}

func (UnimplementedNvidiaQueryServiceServer) QueryGpu(context.Context, *DataCue) (*NvidiaQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryGpu not implemented")
}
func (UnimplementedNvidiaQueryServiceServer) mustEmbedUnimplementedNvidiaQueryServiceServer() {}

// UnsafeNvidiaQueryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NvidiaQueryServiceServer will
// result in compilation errors.
type UnsafeNvidiaQueryServiceServer interface {
	mustEmbedUnimplementedNvidiaQueryServiceServer()
}

func RegisterNvidiaQueryServiceServer(s grpc.ServiceRegistrar, srv NvidiaQueryServiceServer) {
	s.RegisterService(&_NvidiaQueryService_serviceDesc, srv)
}

func _NvidiaQueryService_QueryGpu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataCue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NvidiaQueryServiceServer).QueryGpu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ducao.govidia_smi.NvidiaQueryService/QueryGpu",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NvidiaQueryServiceServer).QueryGpu(ctx, req.(*DataCue))
	}
	return interceptor(ctx, in, info, handler)
}

var _NvidiaQueryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ducao.govidia_smi.NvidiaQueryService",
	HandlerType: (*NvidiaQueryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryGpu",
			Handler:    _NvidiaQueryService_QueryGpu_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "govidia.proto",
}
